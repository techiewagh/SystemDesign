Watch this video first
https://www.youtube.com/watch?v=Tk_fi5l8cag
Back To Back SWE : Just Genius beautifully explained
https://www.youtube.com/watch?v=O0By4Zq0OFc

#Iterative Method
public ListNode reverseList(ListNode head) {
    //Intialize
		ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode nextTemp = curr.next; //Store Next
        curr.next = prev; // reverse
        // advance to next node
				prev = curr; 
        curr = nextTemp;
    }
		//New head at end
    return prev;
}

Complexity analysis
	Time complexity  : O(n), assume that n is the list's length, the time complexity is O(n).
  Space complexity : O(1)

#Recursive Method
public ListNode reverseList(ListNode head) {
    if (head == null || head.next == null) return head;
    ListNode p = reverseList(head.next);
    head.next.next = head;
    head.next = null;
    return p;
}

Complexity analysis
	Time complexity  : O(n), assume that n is the list's length, the time complexity is O(n).
	Space complexity : O(n), The extra space comes from implicit stack space due to recursion.
										 Recursion goes n level deep.

	


